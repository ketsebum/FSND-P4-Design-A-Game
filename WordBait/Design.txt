What additional properties did you add to your models and why?

I decided to add in a completely new history model. I felt as though, that the capturing of each move made more sense to have a separate category that could fully
gather and store that information properly. I also decided to input the win / loss information into the game, if the game is going to remain historical, and it
wouldn't be repeating itself, that I could get away with simplifying it there. Also, since this is a multiplayer game, I decided that the Turn was very valuable,
as I needed to know whose turn it was. User_one & Two was used to switch back and forth on said turn in order to be able to fully facilitate the game. Finally,
I also decided to go with creating a leaderboard instead of trying to do the calculations everytime I needed on the fly. At some point, I believe the game would want
a stand alone page that was just showing the current leaders, and figured that it would reduce the energy required to get the information if the records were stored
in a format that it would be consumed at, a very simple win / loss.

What were some of the trade-offs or struggles you faced when implementing the new game logic?

I had some syntactical struggles with how the NDB models were working. I am much more use to have SQL to be able to solve issues, and it is very different going into a 
OOP to be able to solve the same problem. For example, I find it to be much easier to simply write select count(*) from XXX instead of XXX.query().fetch().count() or 
something else along those lines.

I also had some issues when it came to properly forming the request / responses in forms. As this is a completely new area for how to handle it, I ran into a few property
errors with expectations of Strings, Integers, or Booleans and trying to understand how to properly format it all.